{
  "_args": [
    [
      "faceCentering@file:../lib/faceCentering/",
      "/Users/crodriguez2/dev/github-pages/faces/src/app"
    ]
  ],
  "_from": "src/lib/faceCentering",
  "_id": "faceCentering@0.1.8",
  "_inCache": true,
  "_location": "/faceCentering",
  "_phantomChildren": {},
  "_requested": {
    "name": "faceCentering",
    "raw": "faceCentering@file:../lib/faceCentering/",
    "rawSpec": "file:../lib/faceCentering/",
    "scope": null,
    "spec": "/Users/crodriguez2/dev/github-pages/faces/src/lib/faceCentering",
    "type": "directory"
  },
  "_requiredBy": [
    "/faces"
  ],
  "_resolved": "file:src/lib/faceCentering",
  "_shasum": "5fd05eb455a7f923abc6146093c0ed1763b85ed1",
  "_shrinkwrap": null,
  "_spec": "faceCentering@file:../lib/faceCentering/",
  "_where": "/Users/crodriguez2/dev/github-pages/faces/src/app",
  "author": {
    "name": "claudiordgz"
  },
  "bugs": {
    "url": "https://github.com/claudiordgz/faces/issues"
  },
  "dependencies": {
    "graphics": "file:../graphics/"
  },
  "description": "Library for centering faces found",
  "devDependencies": {},
  "homepage": "https://claudiordgz.github.io/faces",
  "installable": true,
  "keywords": [
    "javascript",
    "js"
  ],
  "license": "MIT",
  "main": "faceCentering.js",
  "name": "faceCentering",
  "optionalDependencies": {},
  "readme": "##FaceCentering library for Face Recognition\n\nThis library contains functions that operate over multiple\nobjects found by Tracking JS. \n\n\nPositioning the faces\n\nTo position the faces we need to know the maximum size this will take.\nWe assume that the box contains valid faces. We then break the source image into\nquadrants to determine where is are the faces. Then we calculate in which quadrants\nare our faces. \n\n1. We receive our image, we need access to the binary data of the image, which\nmay require downloading it or having it cached in a CORS enabled server.\n\n  ![Le wild image appears](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/001.png)\n\n2. We use face recognition software, in its most basic configuration it will retrieve \nsome faces. If it doesn't retrieve all, we would have to retrieve further information<sup>1</sup>.\n\n  ![Le wild faces are detected](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/002.png)\n\n3. We define a face box, that contains all the found faces.\n\n  ![Le wild faces are detected](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/003.png)\n\n4. We partition the image into quadrants and detect the vertices that touch each quadrant.\n\n  ![Le wild quadrants are sliced](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/004.png)\n\n5. We calculate the area of the face box contained in each quadrant, \nthen we calculate the percentage this area represents against the whole face box. \n\n  ![Le wild areas are calculated](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/005.png)\n\n6. Now we need to calculate an anchor point. In the case of this example the anchor point\nis center, because all parts of the face box have very similar percentages, thus there is no\ndominant quadrant. Then we try to position our background image in a circular div.\n\n  ![Le wild div is positioned](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/006.png)\n\n7. As we can see to showcase all the faces we would have blank spaces, which is solvable<sup>2</sup>. \nAs of now we need to prevent all white space so we default to cover all the div while centering the image (since \nall of the quadrants a more or less equal percentage of the faces). \n\n  ![Le wild image is centered](https://raw.githubusercontent.com/claudiordgz/faces/master/src/lib/faceCentering/docs/assets/007.png)\n\n\n##<sup>1</sup> Getting more data from the images\n\nBasic Face Recognition is done using a technology called Haar Cascades. We don't really have to get\ninto that but we could try retrieving more information and adjusting such haar cascades to detect more information.\n\n\nOther information we may retrieve are for example eyes, or mouths, which by comparing them to the face box\nWe will be able to know if they are part of an already detected face or not. \n\n##<sup>2</sup> Solving the blank spaces\n\nNot all faces will fit into the circle. A simple solution is to check the color in the 10% of the margins, from \nthere we could choose a color or even clip the margin if it has some border and use a color. \n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/claudiordgz/faces.git"
  },
  "version": "0.1.8"
}
